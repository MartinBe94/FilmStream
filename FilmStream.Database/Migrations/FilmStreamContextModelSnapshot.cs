// <auto-generated />
using System;
using FilmStream.Database.Contexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FilmStream.Database.Migrations
{
    [DbContext(typeof(FilmStreamContext))]
    partial class FilmStreamContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FilmStream.Database.Entities.Director", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Directors");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Tim Miller"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Jon Watts"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Christopher Nolan"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Brian De Palma"
                        });
                });

            modelBuilder.Entity("FilmStream.Database.Entities.Film", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DirectorId")
                        .HasColumnType("int");

                    b.Property<string>("FilmUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("Free")
                        .HasColumnType("bit");

                    b.Property<DateTime>("Released")
                        .HasColumnType("datetime2");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("DirectorId");

                    b.ToTable("Films");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Description = "Deadpool Rated-R Marvel Movie",
                            DirectorId = 1,
                            FilmUrl = "https://www.youtube.com/watch?v=ONHBaC-pfsk&ab_channel=20thCenturyStudios",
                            Free = true,
                            Released = new DateTime(2016, 2, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Deadpool"
                        },
                        new
                        {
                            Id = 2,
                            Description = "Spiderman Movie",
                            DirectorId = 2,
                            FilmUrl = "https://www.youtube.com/watch?v=JfVOs4VSpmA&ab_channel=SonyPicturesEntertainment",
                            Free = true,
                            Released = new DateTime(2021, 12, 13, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Spider-Man: No Way Home"
                        },
                        new
                        {
                            Id = 3,
                            Description = "The best Batman movie",
                            DirectorId = 3,
                            FilmUrl = "https://www.youtube.com/watch?v=EXeTwQWrcwY&ab_channel=RottenTomatoesClassicTrailers",
                            Free = true,
                            Released = new DateTime(2008, 7, 14, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Batman The Dark Knight"
                        },
                        new
                        {
                            Id = 4,
                            Description = "The Classical Scarface moive.",
                            DirectorId = 4,
                            FilmUrl = "https://www.youtube.com/watch?v=cv276Wg3e7I&ab_channel=RottenTomatoesTrailers",
                            Free = true,
                            Released = new DateTime(1983, 12, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Title = "Scarface"
                        });
                });

            modelBuilder.Entity("FilmStream.Database.Entities.FilmGenre", b =>
                {
                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.Property<int>("GenreId")
                        .HasColumnType("int");

                    b.HasKey("FilmId", "GenreId");

                    b.HasIndex("GenreId");

                    b.ToTable("FilmGenres", (string)null);

                    b.HasData(
                        new
                        {
                            FilmId = 1,
                            GenreId = 1
                        },
                        new
                        {
                            FilmId = 1,
                            GenreId = 2
                        },
                        new
                        {
                            FilmId = 2,
                            GenreId = 1
                        },
                        new
                        {
                            FilmId = 2,
                            GenreId = 2
                        },
                        new
                        {
                            FilmId = 3,
                            GenreId = 1
                        },
                        new
                        {
                            FilmId = 3,
                            GenreId = 2
                        },
                        new
                        {
                            FilmId = 4,
                            GenreId = 5
                        },
                        new
                        {
                            FilmId = 4,
                            GenreId = 6
                        });
                });

            modelBuilder.Entity("FilmStream.Database.Entities.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Genres");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Sci-Fi"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Criminal"
                        });
                });

            modelBuilder.Entity("FilmStream.Database.Entities.SimilarFilm", b =>
                {
                    b.Property<int>("FilmId")
                        .HasColumnType("int");

                    b.Property<int>("SimilarFilmId")
                        .HasColumnType("int");

                    b.HasKey("FilmId", "SimilarFilmId");

                    b.HasIndex("SimilarFilmId");

                    b.ToTable("SimilarFilms");

                    b.HasData(
                        new
                        {
                            FilmId = 1,
                            SimilarFilmId = 2
                        },
                        new
                        {
                            FilmId = 1,
                            SimilarFilmId = 3
                        },
                        new
                        {
                            FilmId = 2,
                            SimilarFilmId = 1
                        },
                        new
                        {
                            FilmId = 2,
                            SimilarFilmId = 3
                        },
                        new
                        {
                            FilmId = 3,
                            SimilarFilmId = 1
                        },
                        new
                        {
                            FilmId = 3,
                            SimilarFilmId = 2
                        });
                });

            modelBuilder.Entity("FilmStream.Database.Entities.Film", b =>
                {
                    b.HasOne("FilmStream.Database.Entities.Director", "Director")
                        .WithMany("Films")
                        .HasForeignKey("DirectorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Director");
                });

            modelBuilder.Entity("FilmStream.Database.Entities.FilmGenre", b =>
                {
                    b.HasOne("FilmStream.Database.Entities.Film", "Film")
                        .WithMany()
                        .HasForeignKey("FilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmStream.Database.Entities.Genre", "Genre")
                        .WithMany()
                        .HasForeignKey("GenreId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("FilmStream.Database.Entities.SimilarFilm", b =>
                {
                    b.HasOne("FilmStream.Database.Entities.Film", "Film")
                        .WithMany("SimilarFilms")
                        .HasForeignKey("FilmId")
                        .IsRequired();

                    b.HasOne("FilmStream.Database.Entities.Film", "Similar")
                        .WithMany()
                        .HasForeignKey("SimilarFilmId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Film");

                    b.Navigation("Similar");
                });

            modelBuilder.Entity("FilmStream.Database.Entities.Director", b =>
                {
                    b.Navigation("Films");
                });

            modelBuilder.Entity("FilmStream.Database.Entities.Film", b =>
                {
                    b.Navigation("SimilarFilms");
                });
#pragma warning restore 612, 618
        }
    }
}
